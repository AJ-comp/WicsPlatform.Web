@page "/manage-speaker"
@attribute [Authorize]
@using WicsPlatform.Client.Dialogs
@using Microsoft.AspNetCore.Components.Forms

<PageTitle>스피커 관리</PageTitle>

<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center" Class="mb-4">
        <RadzenColumn Size="12">
            <RadzenText Text="스피커 관리" TextStyle="TextStyle.DisplayH4" TagName="TagName.H1" Style="margin: 0; font-weight: 600; color: var(--rz-text-title-color);" />
            <RadzenText Text="스피커와 그룹을 관리하고 채널에 할당합니다" TextStyle="TextStyle.Body1" Class="mb-0 mt-2" Style="color: var(--rz-text-secondary-color);" />
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow Gap="1rem">
        <!-- 좌측: 스피커 그룹 -->
        <RadzenColumn Size="12" SizeLG="4">
            <RadzenCard class="h-100" Style="min-height: calc(100vh - 200px); position: relative;">
                @if (isAddingToGroup)
                {
                    <div class="processing-overlay">
                        <div class="processing-content">
                            <RadzenText TextStyle="TextStyle.H6" class="mb-3" Style="color: white;">
                                스피커를 그룹에 추가하는 중...
                            </RadzenText>
                            <RadzenProgressBar Value="@AddProgressPercent" ShowValue="true" Max="100"
                                               Style="width: 200px; height: 10px;" />
                            <RadzenText TextStyle="TextStyle.Body2" class="mt-2" Style="color: white;">
                                @addProgress / @addTotal
                            </RadzenText>
                        </div>
                    </div>
                }
                <RadzenStack Gap="1rem">
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="8">
                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.75rem">
                                <RadzenIcon Icon="folder" Style="font-size: 1.75rem; color: var(--rz-primary);" />
                                <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3" class="mb-0" Style="font-weight: 600;">
                                    스피커 그룹
                                </RadzenText>
                            </RadzenStack>
                        </RadzenColumn>
                        <RadzenColumn Size="4" class="text-end">
                            <RadzenButton Icon="add" Text="추가" Click="@OpenAddSpeakerGroupDialog"
                                          ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Small" />
                        </RadzenColumn>
                    </RadzenRow>

                    @if (isLoadingGroups)
                    {
                        <div class="text-center py-5">
                            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 40%; height: 8px; margin: 0 auto;" />
                            <RadzenText TextStyle="TextStyle.Body1" class="mt-3 mb-0">그룹 목록을 불러오는 중...</RadzenText>
                        </div>
                    }
                    else if (!speakerGroups.Any())
                    {
                        <div class="text-center py-5">
                            <RadzenIcon Icon="folder_off" Style="width: 48px; height: 48px; font-size: 48px; color: var(--rz-text-disabled-color)" />
                            <RadzenText Text="스피커 그룹이 없습니다" TextStyle="TextStyle.Body1" Style="margin: 1rem 0 0.5rem 0; opacity: 0.5" />
                            <RadzenText Text="그룹 추가 버튼을 클릭하여 새 그룹을 만드세요" TextStyle="TextStyle.Body2" Style="opacity: 0.5" />
                        </div>
                    }
                    else
                    {
                        <RadzenStack Gap="0.5rem" Style="max-height: calc(100vh - 300px); overflow-y: auto;">
                            @foreach (var group in speakerGroups)
                            {
                                var isExpanded = expandedGroups.Contains(group.Id);
                                var groupSpeakerCount = GetSpeakerCountInGroup(group.Id);
                                var groupCardClass = $"group-card {(selectedGroups?.Any(g => g.Id == group.Id) == true ? "selected" : "")} {(isDraggingOverGroup == group.Id ? "drag-over" : "")}";

                                <div class="group-drop-zone" data-group-id="@group.Id">
                                    <RadzenCard class="@groupCardClass"
                                                Style="cursor: pointer; transition: all 0.2s ease;">
                                        <RadzenStack Gap="0.5rem">
                                            <RadzenRow AlignItems="AlignItems.Center">
                                                <RadzenColumn Size="8" @onclick="@(() => ToggleGroupExpansion(group.Id))">
                                                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.25rem">
                                                        <RadzenButton Icon="@(isExpanded ? "expand_more" : "chevron_right")"
                                                                      ButtonStyle="ButtonStyle.Light"
                                                                      Variant="Variant.Flat"
                                                                      Size="ButtonSize.Small"
                                                                      Style="min-width: 24px; padding: 4px;"
                                                                      @onclick:stopPropagation="true" />
                                                        <RadzenIcon Icon="@(isExpanded ? "folder_open" : "folder")" />
                                                        <RadzenText TextStyle="TextStyle.Subtitle1" class="mb-0" Style="font-weight: 500;">@group.Name</RadzenText>
                                                    </RadzenStack>
                                                </RadzenColumn>
                                                <RadzenColumn Size="4" class="text-end">
                                                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.25rem">
                                                        <RadzenBadge BadgeStyle="BadgeStyle.Info" IsPill="true" Text="@groupSpeakerCount.ToString()" />
                                                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Small"
                                                                      Click="@(() => OpenEditGroupDialog(group))" Title="그룹 수정"
                                                                      Style="min-width: 28px; padding: 4px;"
                                                                      @onclick:stopPropagation="true" />
                                                        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Small"
                                                                      Click="@(() => OpenDeleteGroupDialog(group))" Title="그룹 삭제"
                                                                      Style="min-width: 28px; padding: 4px;"
                                                                      @onclick:stopPropagation="true" />
                                                    </RadzenStack>
                                                </RadzenColumn>
                                            </RadzenRow>

                                            @if (isExpanded && groupSpeakerCount > 0)
                                            {
                                                <RadzenRow>
                                                    <RadzenColumn Size="12">
                                                        <RadzenCard class="group-speakers-list">
                                                            @{
                                                                var speakersInGroup = GetSpeakersInGroupSync(group.Id);
                                                            }
                                                            @if (speakersInGroup.Any())
                                                            {
                                                                <RadzenStack Gap="0.25rem" Style="max-height: 300px; overflow-y: auto;">
                                                                    @foreach (var speaker in speakersInGroup)
                                                                    {
                                                                        <RadzenRow AlignItems="AlignItems.Center" class="speaker-item">
                                                                            <RadzenColumn Size="1">
                                                                                <RadzenIcon Icon="speaker" Style="font-size: 0.875rem;" />
                                                                            </RadzenColumn>
                                                                            <RadzenColumn Size="6">
                                                                                <RadzenText TextStyle="TextStyle.Body2" class="mb-0">@speaker.Name</RadzenText>
                                                                            </RadzenColumn>
                                                                            <RadzenColumn Size="3" class="text-end">
                                                                                <RadzenBadge BadgeStyle="@GetStatusBadgeStyle(speaker.State)"
                                                                                             IsPill="true"
                                                                                             Text="@GetStatusText(speaker.State)"
                                                                                             Style="font-size: 0.75rem; padding: 2px 8px;" />
                                                                            </RadzenColumn>
                                                                            <RadzenColumn Size="2" class="text-end">
                                                                                <RadzenButton Icon="clear"
                                                                                              ButtonStyle="ButtonStyle.Danger"
                                                                                              Variant="Variant.Flat"
                                                                                              Size="ButtonSize.Small"
                                                                                              Style="min-width: 24px; padding: 4px;"
                                                                                              Title="그룹에서 제거"
                                                                                              Click="@(() => OpenRemoveSpeakerFromGroupDialog(speaker, group))"
                                                                                              @onclick:stopPropagation="true" />
                                                                            </RadzenColumn>
                                                                        </RadzenRow>
                                                                    }
                                                                </RadzenStack>
                                                            }
                                                        </RadzenCard>
                                                    </RadzenColumn>
                                                </RadzenRow>
                                            }
                                        </RadzenStack>
                                    </RadzenCard>
                                </div>
                            }
                        </RadzenStack>
                    }
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>

        <!-- 우측: 스피커 목록 -->
        <RadzenColumn Size="12" SizeLG="8">
            <RadzenCard class="h-100" Style="min-height: calc(100vh - 200px);">
                <RadzenStack Gap="1rem">
                    <!-- 검색 필터 -->
                    <RadzenCard class="filter-card">
                        <RadzenStack Gap="0.75rem">
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenColumn Size="8">
                                    <RadzenText TextStyle="TextStyle.Subtitle2" class="mb-0">검색 필터</RadzenText>
                                </RadzenColumn>
                                <RadzenColumn Size="4" class="text-end">
                                    <RadzenButton Icon="add_circle" Text="스피커 추가" Click="@OpenAddSpeakerDialog"
                                                  ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenRow Gap="0.5rem">
                                <RadzenColumn Size="6" SizeMD="3">
                                    <RadzenTextBox @bind-Value="@speakerNameFilter" Placeholder="스피커명" Change="@ApplyFilters" Style="width: 100%" />
                                </RadzenColumn>
                                <RadzenColumn Size="6" SizeMD="3">
                                    <RadzenTextBox @bind-Value="@ipAddressFilter" Placeholder="IP 주소" Change="@ApplyFilters" Style="width: 100%" />
                                </RadzenColumn>
                                <RadzenColumn Size="6" SizeMD="3">
                                    <RadzenTextBox @bind-Value="@locationFilter" Placeholder="설치 위치" Change="@ApplyFilters" Style="width: 100%" />
                                </RadzenColumn>
                                <RadzenColumn Size="6" SizeMD="3">
                                    <RadzenDropDown @bind-Value="@channelFilter"
                                                    Data="@channels"
                                                    TextProperty="Name"
                                                    ValueProperty="Id"
                                                    AllowClear="true"
                                                    Placeholder="채널 선택"
                                                    Change="@ApplyFilters"
                                                    Style="width: 100%"
                                                    TValue="ulong?" />
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenCard>

                    <!-- 선택된 스피커 수 표시 -->
                    @if (selectedSpeakers.Any())
                    {
                        <RadzenCard class="selected-info-card">
                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                <RadzenText TextStyle="TextStyle.Body2" class="mb-0">
                                    <RadzenIcon Icon="check_circle" Style="color: var(--rz-info);" />
                                    @(selectedSpeakers.Count)개의 스피커가 선택되었습니다
                                </RadzenText>
                                <RadzenButton Text="선택 해제" Icon="clear" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small"
                                              Click="@ClearSelection" />
                            </RadzenStack>
                        </RadzenCard>
                    }

                    <!-- 스피커 목록 -->
                    @if (isLoading)
                    {
                        <div class="text-center py-5">
                            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 40%; height: 8px; margin: 0 auto;" />
                            <RadzenText Text="스피커 목록을 불러오는 중입니다..." TextStyle="TextStyle.Body1" class="mt-3 mb-0" />
                        </div>
                    }
                    else if (!speakers.Any())
                    {
                        <div class="text-center py-5">
                            <RadzenIcon Icon="speaker" Style="width: 48px; height: 48px; font-size: 48px; color: var(--rz-text-disabled-color)" />
                            <RadzenText Text="스피커 목록이 비어 있습니다." TextStyle="TextStyle.Body1" Style="margin: 1rem 0 0.5rem 0; opacity: 0.5" />
                            <RadzenText Text="새 스피커를 추가하려면 '스피커 추가' 버튼을 클릭하세요." TextStyle="TextStyle.Body2" Style="opacity: 0.5" />
                        </div>
                    }
                    else
                    {
                        <RadzenStack Gap="0.75rem" Style="max-height: calc(100vh - 300px); overflow-y: auto;">
                            @foreach (var speaker in speakers)
                            {
                                var speakerCardClass = $"speaker-card {(IsSpeakerSelected(speaker) ? "selected" : "")} {(isDragging && IsSpeakerSelected(speaker) ? "dragging" : "")}";

                                <RadzenCard class="@speakerCardClass"
                                            Style="cursor: pointer;"
                                            @onclick="@(() => ToggleSpeakerSelection(speaker))"
                                            draggable="@(IsSpeakerSelected(speaker) ? "true" : "false")"
                                            @ondragstart="@(() => HandleDragStart(speaker))"
                                            @ondragend="@HandleDragEnd"
                                            data-speaker-id="@speaker.Id">
                                    <RadzenRow AlignItems="AlignItems.Center" Gap="0.5rem">
                                        <RadzenColumn Size="1">
                                            <RadzenCheckBox Value="@IsSpeakerSelected(speaker)"
                                                            Change="@((bool value) => SpeakerSelectionChanged(value, speaker))"
                                                            @onclick:stopPropagation="true" />
                                        </RadzenColumn>
                                        <RadzenColumn Size="8" SizeMD="8">
                                            <RadzenStack Gap="0.25rem">
                                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                                                    <RadzenIcon Icon="speaker" />
                                                    <RadzenText TextStyle="TextStyle.Subtitle1" class="mb-0" Style="font-weight: 500;">@speaker.Name</RadzenText>
                                                    <RadzenBadge BadgeStyle="@GetStatusBadgeStyle(speaker.State)" IsPill="true" Text="@GetStatusText(speaker.State)" />
                                                </RadzenStack>
                                                <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" Style="font-size: 0.875rem; color: var(--rz-text-secondary-color);">
                                                    <span><RadzenIcon Icon="lan" Style="font-size: 1rem;" /> @speaker.Ip</span>
                                                    <span><RadzenIcon Icon="location_on" Style="font-size: 1rem;" /> @speaker.Location</span>
                                                    @if (!string.IsNullOrEmpty(speaker.Model))
                                                    {
                                                        <span><RadzenIcon Icon="devices" Style="font-size: 1rem;" /> @speaker.Model</span>
                                                    }
                                                </RadzenStack>
                                            </RadzenStack>
                                        </RadzenColumn>
                                        <RadzenColumn Size="3" SizeMD="3" class="text-end">
                                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Small"
                                                          Click="@(() => OpenEditSpeakerDialog(speaker))"
                                                          @onclick:stopPropagation="true" />
                                            <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Small"
                                                          Click="@(() => OpenDeleteSpeakerDialog(speaker))"
                                                          @onclick:stopPropagation="true" />
                                        </RadzenColumn>
                                    </RadzenRow>
                                </RadzenCard>
                            }
                        </RadzenStack>
                    }
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

<style>
    /* 카드 스타일 개선 */
    .rz-card {
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        border: 1px solid var(--rz-border-light);
    }

    /* 처리 중 오버레이 */
    .processing-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        border-radius: var(--rz-border-radius);
    }

    .processing-content {
        text-align: center;
        padding: 2rem;
        background-color: rgba(0, 0, 0, 0.8);
        border-radius: var(--rz-border-radius);
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
    }

    /* 드래그 중 시각적 피드백 추가 */
    body.dragging {
        cursor: grabbing !important;
    }

    .speaker-card.dragging {
        opacity: 0.5;
        cursor: grabbing;
        transform: scale(0.95);
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
    }

    /* 그룹 드롭 존 */
    .group-drop-zone {
        width: 100%;
        min-height: 80px;
        position: relative;
        transition: all 0.3s ease;
    }

        /* 드래그 오버 시 드롭 존 표시 */
        .group-drop-zone.drag-over {
            background-color: rgba(76, 175, 80, 0.1);
            border-radius: 8px;
            outline: 2px dashed #4CAF50;
            outline-offset: -2px;
        }

    /* 드래그 중일 때 모든 그룹 카드에 시각적 힌트 추가 */
    body.dragging .group-card:not(.drag-over) {
        opacity: 0.7;
    }

    body.dragging .group-card {
        border-style: dashed;
    }

    /* 그룹 카드 스타일 */
    .group-card {
        border: 1px solid var(--rz-border);
        transition: all 0.2s ease;
        padding: 0.75rem !important;
        min-height: 48px;
    }

        .group-card:hover {
            border-color: var(--rz-primary-lighter);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            transform: translateY(-2px);
        }

        .group-card.selected {
            border-color: var(--rz-primary);
            background-color: var(--rz-primary-lighter);
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
        }

        .group-card.drag-over {
            border-color: var(--rz-success);
            background-color: var(--rz-success-lighter);
            box-shadow: 0 4px 20px rgba(0, 255, 0, 0.2);
            transform: scale(1.02);
        }

    /* 스피커 카드 스타일 */
    .speaker-card {
        border: 1px solid var(--rz-border);
        transition: all 0.2s ease;
        padding: 1rem !important;
        cursor: move;
    }

        .speaker-card:hover {
            border-color: var(--rz-primary-lighter);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            background-color: var(--rz-base-100);
        }

        .speaker-card.selected {
            border-color: var(--rz-primary);
            background-color: var(--rz-primary-lighter);
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
        }

    /* 선택 정보 카드 스타일 */
    .selected-info-card {
        background-color: var(--rz-info-lighter);
        border-color: var(--rz-info);
        padding: 0.75rem !important;
    }

    /* 필터 카드 스타일 */
    .filter-card {
        background-color: var(--rz-base-100);
        border: 1px solid var(--rz-border);
        padding: 1rem !important;
    }

    /* 배지 스타일 개선 */
    .rz-badge {
        font-weight: 500;
        letter-spacing: 0.25px;
    }

    /* 버튼 호버 효과 */
    .rz-button-icon-only:hover {
        transform: scale(1.1);
        transition: transform 0.2s ease;
    }

    /* 페이지 헤더 스타일 */
    h1 {
        background: linear-gradient(135deg, var(--rz-primary) 0%, var(--rz-primary-dark) 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    /* 선택된 스피커 액션 바 스타일 */
    .bg-info.bg-opacity-10 {
        background-color: rgba(var(--rz-info-rgb), 0.1) !important;
        border: 1px solid var(--rz-info-lighter);
    }

    /* 스크롤바 스타일 */
    ::-webkit-scrollbar {
        width: 8px;
        height: 8px;
    }

    ::-webkit-scrollbar-track {
        background: var(--rz-base-100);
        border-radius: 4px;
    }

    ::-webkit-scrollbar-thumb {
        background: var(--rz-text-disabled-color);
        border-radius: 4px;
    }

        ::-webkit-scrollbar-thumb:hover {
            background: var(--rz-text-secondary-color);
        }

    /* 그룹 내 스피커 목록 스크롤바 */
    .group-speakers-list ::-webkit-scrollbar {
        width: 6px;
    }

    .group-speakers-list ::-webkit-scrollbar-track {
        background: var(--rz-base-200);
        border-radius: 3px;
    }

    .group-speakers-list ::-webkit-scrollbar-thumb {
        background: var(--rz-text-tertiary-color);
        border-radius: 3px;
    }

    /* 아이콘 정렬 */
    .rz-icon {
        vertical-align: middle;
    }

    /* 그룹 내 스피커 목록 스타일 */
    .group-speakers-list {
        background-color: rgba(0, 0, 0, 0.05);
        border: 1px solid rgba(0, 0, 0, 0.1);
        padding: 0.75rem !important;
        margin-top: 0.5rem;
        border-radius: 4px;
    }

    /* 다크 테마용 그룹 스피커 목록 */
    :root[data-theme='dark'] .group-speakers-list {
        background-color: rgba(255, 255, 255, 0.05);
        border-color: rgba(255, 255, 255, 0.1);
    }

    .speaker-item {
        padding: 0.25rem 0;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        transition: background-color 0.2s ease;
    }

        .speaker-item:hover {
            background-color: rgba(0, 0, 0, 0.02);
        }

        .speaker-item:last-child {
            border-bottom: none;
        }

    /* 다크 테마용 스피커 아이템 */
    :root[data-theme='dark'] .speaker-item {
        border-bottom-color: rgba(255, 255, 255, 0.05);
    }

        :root[data-theme='dark'] .speaker-item:hover {
            background-color: rgba(255, 255, 255, 0.02);
        }

    /* 확장/축소 버튼 애니메이션 */
    .rz-button-icon-only {
        transition: transform 0.2s ease;
    }

    /* 드래그 중 커서 스타일 */
    [draggable="true"] {
        cursor: grab;
    }

        [draggable="true"]:active {
            cursor: grabbing;
        }

    /* 다크 테마 지원 */
    :root[data-theme='dark'] .group-card.drag-over {
        background-color: rgba(var(--rz-success-rgb), 0.2);
    }

    :root[data-theme='dark'] .speaker-card.selected {
        background-color: rgba(var(--rz-primary-rgb), 0.2);
    }

    :root[data-theme='dark'] .selected-info-card {
        background-color: rgba(var(--rz-info-rgb), 0.2);
    }
</style>
