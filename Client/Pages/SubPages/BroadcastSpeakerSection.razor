@using WicsPlatform.Server.Models.wics

<RadzenCard class="mt-3 collapsible-panel-container">
    <!-- 클릭 가능한 커스텀 헤더 -->
    <div @onclick="TogglePanel"
         style="background-color: var(--rz-sidebar-background-color); padding: 0.75rem 1rem; cursor: pointer; transition: all 0.3s ease; user-select: none; border-radius: var(--rz-border-radius) var(--rz-border-radius) 0 0; border-bottom: 1px solid var(--rz-border-color);">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Style="width: 100%;">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.375rem">
                <RadzenIcon Icon="@GetChannelIcon(Channel?.Type ?? 0)" Style="font-size: 1.25rem; color: var(--rz-primary);" />
                <RadzenText TextStyle="TextStyle.Subtitle1" class="mb-0" Style="font-size: 0.95rem;">
                    @(Channel?.Name ?? "채널") - 스피커 그룹 관리
                </RadzenText>
                @if (selectedGroups.Any())
                {
                    <RadzenBadge BadgeStyle="BadgeStyle.Success" IsPill="true"
                                 Text="@($"{selectedGroups.Count}개 그룹 선택됨")"
                                 Style="font-size: 0.65rem; padding: 2px 8px;" />
                }
            </RadzenStack>
            <RadzenIcon Icon="@(IsCollapsed ? "expand_more" : "expand_less")"
                        Style="font-size: 1.25rem; transition: transform 0.3s ease;"
                        class="@(IsCollapsed ? "rotate-icon" : "")" />
        </RadzenStack>
    </div>

    <!-- 패널 내용 -->
    @if (!IsCollapsed)
    {
        <div class="panel-content" Style="padding: 1rem;">
            <RadzenRow Gap="0.75rem">
                <!-- 좌측: 스피커 그룹 목록 -->
                <RadzenColumn Size="12" SizeMD="5">
                    <RadzenCard class="group-section" Style="padding: 0.75rem; position: relative; border: 2px solid var(--rz-border-color); box-shadow: var(--rz-shadow-2);">
                        @if (isAddingToGroup)
                        {
                            <div class="processing-overlay">
                                <RadzenStack Gap="1rem" Style="align-items: center;">
                                    <RadzenText TextStyle="TextStyle.Body2" Style="color: white; font-weight: 600;">스피커를 그룹에 추가하는 중...</RadzenText>
                                    <RadzenProgressBar Value="@AddProgressPercent" ShowValue="true" Max="100" Style="width: 200px; height: 8px;" />
                                    <RadzenText TextStyle="TextStyle.Caption" Style="color: rgba(255,255,255,0.9);">@addProgress / @addTotal</RadzenText>
                                </RadzenStack>
                            </div>
                        }

                        <RadzenStack Orientation="Orientation.Horizontal" 
                                     JustifyContent="JustifyContent.SpaceBetween" 
                                     AlignItems="AlignItems.Center" 
                                     class="mb-2">
                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.25rem">
                                <RadzenIcon Icon="folder_special" Style="font-size: 0.875rem; color: var(--rz-primary);" />
                                <RadzenText TextStyle="TextStyle.Body2" class="mb-0" Style="font-weight: 600; font-size: 0.8rem;">
                                    스피커 그룹 목록
                                </RadzenText>
                            </RadzenStack>
                            <RadzenButton Icon="add" 
                                          Text="추가" 
                                          Click="@OpenAddSpeakerGroupDialog" 
                                          ButtonStyle="ButtonStyle.Light" 
                                          Size="ButtonSize.Small"
                                          Style="font-size: 0.7rem; padding: 0.25rem 0.5rem;" />
                        </RadzenStack>

                        @if (isLoadingGroups)
                        {
                            <div class="text-center py-2">
                                <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate"
                                                   Style="width: 60%; height: 4px; margin: 0 auto;" />
                                <RadzenText Text="스피커 그룹을 불러오는 중..." TextStyle="TextStyle.Caption" class="mt-1" Style="font-size: 0.7rem;" />
                            </div>
                        }
                        else if (speakerGroups.Any())
                        {
                            <div style="max-height: 400px; overflow-y: auto; border: 2px solid var(--rz-border-color); border-radius: var(--rz-border-radius); background-color: var(--rz-base-background-color);">
                                @foreach (var group in speakerGroups)
                                {
                                    var isExpanded = expandedGroups.Contains(group.Id);
                                    var groupSpeakerCount = GetSpeakerCountInGroup(group.Id);

                                    <div class="group-drop-zone" data-group-id="@group.Id"
                                         @ondragenter="@(() => HandleDragEnter(group))"
                                         @ondragleave="@(() => HandleDragLeave(group))">
                                        <RadzenCard class="@($"group-item {(viewingGroup?.Id == group.Id ? "viewing" : "")} {(IsGroupSelected(group.Id) ? "selected" : "")} {(isDraggingOverGroup == group.Id ? "drag-over" : "")}")"
                                                    Style="margin: 3px; cursor: pointer; padding: 0.5rem; background-color: var(--rz-base-background-color);"
                                                    @onclick="@(() => ViewGroupDetails(group))">
                                        <RadzenStack Gap="0.25rem">
                                            <RadzenRow AlignItems="AlignItems.Center">
                                                <RadzenColumn Size="8">
                                                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.25rem">
                                                        <RadzenCheckBox Value="@IsGroupSelected(group.Id)"
                                                                        Change="@((bool value) => OnGroupSelectionChanged(group.Id, value))"
                                                                        Style="width: 14px; height: 14px;"
                                                                        @onclick:stopPropagation="true" />
                                                        <RadzenIcon Icon="@(isExpanded ? "folder_open" : "folder")"
                                                                    Style="color: var(--rz-secondary); font-size: 0.875rem;" />
                                                        <RadzenText TextStyle="TextStyle.Body2" class="mb-0" Style="font-weight: 600; font-size: 0.8rem;">
                                                            @group.Name
                                                        </RadzenText>
                                                    </RadzenStack>
                                                </RadzenColumn>
                                                <RadzenColumn Size="4" class="text-end">
                                                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.15rem">
                                                        <RadzenBadge BadgeStyle="BadgeStyle.Info" IsPill="true"
                                                                     Text="@($"{groupSpeakerCount}개")"
                                                                     Style="font-size: 0.6rem; padding: 1px 6px;" />
                                                        <RadzenButton Icon="edit"
                                                                      ButtonStyle="ButtonStyle.Light"
                                                                      Variant="Variant.Flat"
                                                                      Size="ButtonSize.Small"
                                                                      class="expand-button"
                                                                      Click="@(() => OpenEditGroupDialog(group))"
                                                                      @onclick:stopPropagation="true"
                                                                      Title="그룹 수정" />
                                                        <RadzenButton Icon="delete"
                                                                      ButtonStyle="ButtonStyle.Light"
                                                                      Variant="Variant.Flat"
                                                                      Size="ButtonSize.Small"
                                                                      class="expand-button"
                                                                      Click="@(() => OpenDeleteGroupDialog(group))"
                                                                      @onclick:stopPropagation="true"
                                                                      Title="그룹 삭제"
                                                                      Style="color: var(--rz-danger);" />
                                                        <RadzenButton Icon="@(isExpanded ? "expand_less" : "expand_more")"
                                                                      ButtonStyle="ButtonStyle.Light"
                                                                      Variant="Variant.Flat"
                                                                      Size="ButtonSize.Small"
                                                                      class="expand-button"
                                                                      Click="@(() => ToggleGroupExpansion(group.Id))"
                                                                      @onclick:stopPropagation="true"
                                                                      Title="펼치기/접기" />
                                                    </RadzenStack>
                                                </RadzenColumn>
                                            </RadzenRow>

                                            @if (!string.IsNullOrEmpty(group.Description))
                                            {
                                                <RadzenText TextStyle="TextStyle.Caption" class="text-muted mb-0"
                                                            Style="margin-left: 1.5rem; font-size: 0.7rem;">
                                                    @group.Description
                                                </RadzenText>
                                            }

                                            @* 확장된 상태에서 스피커 전체 목록 표시 *@
                                            @if (isExpanded && groupSpeakerCount > 0)
                                            {
                                                <RadzenCard Variant="Variant.Outlined" Style="padding: 0.5rem; margin-top: 0.5rem;">
                                                    @{
                                                        var speakersInGroup = GetSpeakersInGroupSync(group.Id);
                                                    }
                                                    @if (speakersInGroup.Any())
                                                    {
                                                        <RadzenStack Gap="0.35rem" class="speakers-in-group-list">
                                                            @foreach (var speaker in speakersInGroup)
                                                            {
                                                                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center" 
                                                                           Style="padding: 0.35rem 0.5rem; border-bottom: 1px solid var(--rz-border-color);">
                                                                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                                                                        <RadzenIcon Icon="speaker" Style="font-size: 0.75rem; color: var(--rz-secondary); opacity: 0.7;" />
                                                                        <RadzenText TextStyle="TextStyle.Caption" class="mb-0" Style="font-size: 0.7rem;">@speaker.Name</RadzenText>
                                                                    </RadzenStack>
                                                                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.35rem">
                                                                        <RadzenBadge BadgeStyle="@GetSpeakerStatusBadgeStyle(speaker.State)" Text="@GetSpeakerStatusText(speaker.State)" 
                                                                                   IsPill="true" Style="font-size: 0.6rem; padding: 1px 5px;" />
                                                                        <RadzenButton Icon="clear" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Small"
                                                                                    Click="@(() => OpenRemoveSpeakerFromGroupDialog(speaker, group))" Title="그룹에서 제거"
                                                                                    @onclick:stopPropagation="true" class="expand-button" />
                                                                    </RadzenStack>
                                                                </RadzenStack>
                                                            }
                                                        </RadzenStack>
                                                    }
                                                </RadzenCard>
                                            }
                                        </RadzenStack>
                                        </RadzenCard>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-3">
                                <RadzenIcon Icon="folder_off" Style="font-size: 2.5rem; color: var(--rz-text-disabled-color);" />
                                <RadzenText TextStyle="TextStyle.Body2" class="mt-2 mb-0">
                                    스피커 그룹이 없습니다
                                </RadzenText>
                            </div>
                        }
                    </RadzenCard>
                </RadzenColumn>

                <!-- 우측: 전체 스피커 목록 -->
                <RadzenColumn Size="12" SizeMD="7">
                    <RadzenCard class="speakers-section" Style="padding: 0.75rem; border: 2px solid var(--rz-border-color); box-shadow: var(--rz-shadow-2);">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" class="mb-2">
                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.25rem">
                                <RadzenIcon Icon="speaker" Style="font-size: 0.875rem; color: var(--rz-primary);" />
                                <RadzenText TextStyle="TextStyle.Body2" class="mb-0" Style="font-weight: 600; font-size: 0.8rem;">
                                    전체 스피커 목록
                                </RadzenText>
                            </RadzenStack>
                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                                <RadzenText TextStyle="TextStyle.Caption" class="mb-0 text-muted" Style="font-size: 0.7rem;">
                                    온라인: <strong>@allSpeakers.Count(s => s.State == 1)</strong> /
                                    전체: <strong>@allSpeakers.Count()</strong>
                                </RadzenText>
                                <RadzenButton Icon="add" 
                                              Text="추가" 
                                              Click="@OpenAddSpeakerDialog" 
                                              ButtonStyle="ButtonStyle.Light" 
                                              Size="ButtonSize.Small"
                                              Style="font-size: 0.7rem; padding: 0.25rem 0.5rem;" />
                            </RadzenStack>
                        </RadzenStack>

                        @if (isLoadingSpeakers)
                        {
                            <div class="text-center py-2">
                                <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate"
                                                   Style="width: 60%; height: 4px; margin: 0 auto;" />
                                <RadzenText Text="스피커 목록을 불러오는 중..." TextStyle="TextStyle.Caption" class="mt-1" Style="font-size: 0.7rem;" />
                            </div>
                        }
                        else if (allSpeakers.Any())
                        {
                            <RadzenDataGrid Data="@allSpeakers"
                                            TItem="Speaker"
                                            AllowAlternatingRows="false"
                                            AllowPaging="true"
                                            PageSize="10"
                                            Density="Density.Compact"
                                            Style="font-size: 0.75rem;"
                                            RowRender="@OnRowRender">
                                <Columns>
                                    <RadzenDataGridColumn TItem="Speaker" Width="40px" TextAlign="TextAlign.Center" Frozen="true">
                                        <Template Context="speaker">
                                            <RadzenCheckBox Value="@IsSpeakerSelected(speaker.Id)"
                                                            Change="@((bool value) => OnSpeakerSelectionChanged(speaker.Id, value))"
                                                            TValue="bool" />
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="Speaker" Width="30px" TextAlign="TextAlign.Center" Frozen="true">
                                        <Template Context="speaker">
                                            @if (IsSpeakerSelected(speaker.Id))
                                            {
                                                <div draggable="true"
                                                     @ondragstart="@(() => HandleDragStart(speaker))"
                                                     @ondragend="@HandleDragEnd"
                                                     style="cursor: grab; display: flex; align-items: center; justify-content: center;">
                                                    <RadzenIcon Icon="drag_indicator" Style="font-size: 0.875rem; color: var(--rz-primary); cursor: grab;" />
                                                </div>
                                            }
                                            else
                                            {
                                                <RadzenIcon Icon="speaker" Style="font-size: 0.75rem; color: var(--rz-secondary); opacity: 0.5;" />
                                            }
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="Speaker" Property="Name" Title="스피커명">
                                        <Template Context="speaker">
                                            <RadzenText TextStyle="TextStyle.Caption" class="mb-0" Style="font-size: 0.75rem; font-weight: 500;">
                                                @speaker.Name
                                            </RadzenText>
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="Speaker" Property="Ip" Title="IP 주소" Width="120px">
                                        <Template Context="speaker">
                                            <RadzenText TextStyle="TextStyle.Caption" class="mb-0" Style="font-size: 0.7rem;">
                                                @speaker.Ip
                                            </RadzenText>
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="Speaker" Property="Location" Title="설치 위치">
                                        <Template Context="speaker">
                                            <RadzenText TextStyle="TextStyle.Caption" class="mb-0" Style="font-size: 0.7rem;">
                                                @speaker.Location
                                            </RadzenText>
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="Speaker" Title="상태" Width="70px" TextAlign="TextAlign.Center">
                                        <Template Context="speaker">
                                            <RadzenBadge BadgeStyle="@GetSpeakerStatusBadgeStyle(speaker.State)"
                                                         IsPill="true"
                                                         Text="@GetSpeakerStatusText(speaker.State)"
                                                         Style="font-size: 0.6rem; padding: 1px 6px;" />
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="Speaker" Title="작업" Width="80px" TextAlign="TextAlign.Center" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                                        <Template Context="speaker">
                                            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.25rem" JustifyContent="JustifyContent.Center">
                                                <RadzenButton Icon="edit"
                                                              ButtonStyle="ButtonStyle.Light"
                                                              Variant="Variant.Flat"
                                                              Size="ButtonSize.Small"
                                                              class="expand-button"
                                                              Click="@(() => OpenEditSpeakerDialog(speaker))"
                                                              Title="스피커 수정" />
                                                <RadzenButton Icon="delete"
                                                              ButtonStyle="ButtonStyle.Light"
                                                              Variant="Variant.Flat"
                                                              Size="ButtonSize.Small"
                                                              class="expand-button"
                                                              Click="@(() => OpenDeleteSpeakerDialog(speaker))"
                                                              Title="스피커 삭제"
                                                              Style="color: var(--rz-danger);" />
                                            </RadzenStack>
                                        </Template>
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                        }
                        else
                        {
                            <div class="text-center py-3">
                                <RadzenIcon Icon="speaker_notes_off" Style="font-size: 2.5rem; color: var(--rz-text-disabled-color);" />
                                <RadzenText TextStyle="TextStyle.Body2" class="mt-2 mb-0">
                                    스피커가 없습니다
                                </RadzenText>
                            </div>
                        }
                    </RadzenCard>
                </RadzenColumn>
            </RadzenRow>
            @if (selectedGroups.Any())
            {
                <RadzenCard class="mt-2 summary-card" Style="padding: 0.5rem 0.75rem; background-color: var(--rz-primary-lighter);">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.75rem">
                            <RadzenIcon Icon="info" Style="font-size: 0.875rem; color: var(--rz-primary);" />
                            <RadzenText TextStyle="TextStyle.Caption" class="mb-0" Style="font-size: 0.75rem;">
                                <strong>선택된 그룹:</strong> @string.Join(", ", speakerGroups.Where(g => selectedGroups.Contains(g.Id)).Select(g => g.Name))
                            </RadzenText>
                        </RadzenStack>
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                            <RadzenBadge BadgeStyle="BadgeStyle.Success" IsPill="true"
                                         Text="@($"온라인: {GetOnlineSpeakers().Count}개")"
                                         Style="font-size: 0.65rem; padding: 2px 8px;" />
                            <RadzenBadge BadgeStyle="BadgeStyle.Warning" IsPill="true"
                                         Text="@($"오프라인: {GetOfflineSpeakers().Count}개")"
                                         Style="font-size: 0.65rem; padding: 2px 8px;" />
                            <RadzenButton Text="선택 초기화"
                                          Icon="clear"
                                          ButtonStyle="ButtonStyle.Light"
                                          Size="ButtonSize.Small"
                                          Variant="Variant.Flat"
                                          Style="height: 24px; font-size: 0.7rem; padding: 0 0.5rem;"
                                          Click="@ClearSelection" />
                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
            }
        </div>
    }
</RadzenCard>

<style>
.collapsible-panel-container {
        overflow: hidden;
        transition: all 0.3s ease;
    }

    .panel-content {
        animation: slideDown 0.3s ease-out;
        background-color: var(--rz-base-background-color);
        border-radius: 0 0 var(--rz-border-radius) var(--rz-border-radius);
        border: 1px solid var(--rz-border-color);
        border-top: none;
    }

    @@keyframes slideDown {
        from

    {
        opacity: 0;
        transform: translateY(-10px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .rotate-icon {
        transform: rotate(-90deg);
    }

    /* 섹션 스타일 */
    .group-section, .speakers-section {
        height: 100%;
        min-height: 450px;
    }

    /* 그룹 아이템 스타일 */
    .group-item {
        transition: all 0.2s ease;
        border: 2px solid transparent !important;
    }

        .group-item:hover:not(.selected) {
            background-color: rgba(var(--rz-primary-rgb), 0.08) !important;
            transform: translateX(2px);
            box-shadow: var(--rz-shadow-1) !important;
        }

        .group-item.viewing:not(.selected) {
            background-color: rgba(var(--rz-primary-rgb), 0.05) !important;
            border-left: 3px solid var(--rz-primary) !important;
        }

        .group-item.selected {
            background: linear-gradient(90deg, rgba(var(--rz-primary-rgb), 0.2) 0%, rgba(var(--rz-primary-rgb), 0.15) 100%) !important;
            border: 2px solid var(--rz-primary) !important;
            box-shadow: 0 0 8px rgba(var(--rz-primary-rgb), 0.3) !important;
        }

        .group-item.drag-over {
            background-color: rgba(var(--rz-success-rgb), 0.15) !important;
            border: 2px dashed var(--rz-success) !important;
            box-shadow: 0 0 12px rgba(var(--rz-success-rgb), 0.4) !important;
            transform: scale(1.02);
        }

    /* 처리 중 오버레이 */
    .processing-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.85);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        border-radius: var(--rz-border-radius);
    }

    /* 드래그 가능한 항목 커서 */
    [draggable="true"] {
        cursor: grab;
    }

        [draggable="true"]:active {
            cursor: grabbing;
        }

    /* 그룹 스피커 미리보기 */
    .group-speakers-preview {
        padding: 0.25rem 0.5rem;
        background-color: transparent;
        border-radius: 3px;
        border-left: 2px solid var(--rz-base-400);
        margin-left: 0.25rem;
    }

    /* 그룹 내 스피커 목록 */
    .speakers-in-group-list {
        max-height: 250px;
        overflow-y: auto;
    }

        .speakers-in-group-list::-webkit-scrollbar {
            width: 5px;
        }

        .speakers-in-group-list::-webkit-scrollbar-track {
            background: var(--rz-base-200);
            border-radius: 3px;
        }

        .speakers-in-group-list::-webkit-scrollbar-thumb {
            background: var(--rz-base-400);
            border-radius: 3px;
        }

            .speakers-in-group-list::-webkit-scrollbar-thumb:hover {
                background: var(--rz-base-500);
            }

    /* 확장 버튼 */
    .expand-button {
        min-width: 20px !important;
        padding: 2px !important;
        height: 20px !important;
    }

        .expand-button .rz-button-icon {
            font-size: 0.75rem !important;
        }

    /* 요약 카드 */
    .summary-card {
        border: 1px solid var(--rz-primary);
    }

    /* 데이터그리드 컴팩트 스타일 */
    .rz-datatable-data td {
        padding: 0.25rem 0.375rem !important;
        font-size: 0.7rem !important;
    }

    .rz-datatable-thead th {
        padding: 0.375rem 0.5rem !important;
        font-size: 0.7rem !important;
        font-weight: 600 !important;
        background-color: var(--rz-base-200) !important;
    }

    .rz-paginator {
        font-size: 0.65rem !important;
        padding: 0.25rem !important;
    }

        .rz-paginator .rz-button {
            height: 22px !important;
            min-width: 22px !important;
        }

    /* 스크롤바 스타일링 */
    .group-section > div::-webkit-scrollbar,
    .speakers-section > div::-webkit-scrollbar {
        width: 6px;
    }

    .group-section > div::-webkit-scrollbar-track,
    .speakers-section > div::-webkit-scrollbar-track {
        background: var(--rz-base-200);
        border-radius: 3px;
    }

    .group-section > div::-webkit-scrollbar-thumb,
    .speakers-section > div::-webkit-scrollbar-thumb {
        background: var(--rz-base-400);
        border-radius: 3px;
    }

        .group-section > div::-webkit-scrollbar-thumb:hover,
        .speakers-section > div::-webkit-scrollbar-thumb:hover {
            background: var(--rz-base-500);
        }
</style>