@* Injects/updates Radzen theme CSS link in <head> without touching Server/App.razor *@
@using Radzen
@using Microsoft.JSInterop
@inject ThemeService ThemeService
@inject IJSRuntime JS
@implements IDisposable

@code {
    private bool _subscribed;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var theme = ThemeService?.Theme;
            await JS.InvokeVoidAsync("rzThemeLink.ensure", theme);
            if (ThemeService != null && !_subscribed)
            {
                ThemeService.ThemeChanged += OnThemeChanged;
                _subscribed = true;
            }
        }
    }

    private async void OnThemeChanged()
    {
        try
        {
            await JS.InvokeVoidAsync("rzThemeLink.update", ThemeService?.Theme);
        }
        catch { }
    }

    public void Dispose()
    {
        if (_subscribed && ThemeService != null)
        {
            ThemeService.ThemeChanged -= OnThemeChanged;
        }
    }
}

<script>
    (function(){
        function setHtmlDataTheme(theme){
            try {
                var isDark = (theme || '').toLowerCase().indexOf('dark') !== -1;
                document.documentElement.setAttribute('data-theme', isDark ? 'dark' : 'light');
            } catch (e) { }
        }
        function setCookie(name, value, days){
            try {
                var maxAge = (days && days > 0) ? `; max-age=${days*24*60*60}` : '';
                document.cookie = `${name}=${encodeURIComponent(value)}; path=/; SameSite=None; Secure${maxAge}`;
            } catch (e) { }
        }
        function getCookie(name){
            try {
                var m = (document.cookie || '').match(new RegExp('(?:^|;\\s*)' + name.replace(/[-\\.\\[\\]]/g,'\\$&') + '=([^;]+)'));
                return m && m[1] ? decodeURIComponent(m[1]) : '';
            } catch (e) { return ''; }
        }
        function getLocal(name){
            try { return window.localStorage ? localStorage.getItem(name) || '' : ''; } catch (e) { return ''; }
        }
        function setLocal(name, value){
            try { if (window.localStorage) localStorage.setItem(name, value || ''); } catch (e) { }
        }
        function normalizeThemeName(t){
            var v = (t || '').trim().toLowerCase();
            if (v === 'light') return 'material';
            if (v === 'dark') return 'material-dark';
            return v || '';
        }
        function pickTheme(pref){
            var t = (pref && typeof pref === 'string' && pref.trim()) ? pref : '';
            if (!t) t = getLocal('WicsPlatformTheme');
            if (!t) t = getCookie('WicsPlatformTheme');
            if (!t) t = 'material-dark'; // default first-run to dark
            return normalizeThemeName(t);
        }
        function ensureEl(){
            var el = document.getElementById('rz-theme-dyn');
            if (!el){
                el = document.createElement('link');
                el.id = 'rz-theme-dyn';
                el.rel = 'stylesheet';
                document.head.appendChild(el); // append last so it overrides
            } else if (el.parentNode !== document.head){
                document.head.appendChild(el);
            }
            return el;
        }
        function applyTheme(theme){
            var t = pickTheme(theme);
            var href = '/_content/Radzen.Blazor/css/' + t + '.css';
            var el = ensureEl();
            if (el.href !== href) el.href = href;
            setLocal('WicsPlatformTheme', t);
            setCookie('WicsPlatformTheme', t, 365);
            setHtmlDataTheme(t);
            return href;
        }
        window.rzThemeLink = {
            ensure: function(theme){
                try { return applyTheme(theme); } catch(e){ console.error('[rzThemeLink.ensure] failed', e); }
            },
            update: function(theme){
                try { return applyTheme(theme); } catch(e){ console.error('[rzThemeLink.update] failed', e); }
            }
        };
        // bootstrap: if DOM already loaded call now, else attach DOMContentLoaded
        if (document.readyState === 'loading'){
            document.addEventListener('DOMContentLoaded', function(){ try { applyTheme(); } catch(e){} });
        } else {
            try { applyTheme(); } catch(e){}
        }
    })();
</script>
